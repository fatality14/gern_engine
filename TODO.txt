1
class containing arraylist of mat4, vec4 etc and method to pass them in shader
an object of the class should be situated in "*Object", "View", "Perspective" etc classes to pass everything to shader

2
use "InstancedObject" to create custom particle system class

3
shader constructor to parse custom shader code into glsl

4?
make universal *Buffer class with a template not to copypaste code

5
move all main() loading strings to file and make loader class
renderer should parse .txt with loader class and then render everything in declared sequence

6
make WindowManager class from Window class and make the draw sequence for every window in Renderer

7
rename some classes to fit their names

8
add const qualifiers where it need to be

9
parse materials from the .obj properly, MaterialList must be in Mesh class instead of Object class

10
make Object interface class and move some common logic to it

11
rename some GL_* definitions to own enums

12
make the scene parser done

отрисовка объектов
набор переменных для ивентов
интерфейс взаимодействия с объектами
