1
class containing arraylist of mat4, vec4 etc and method to pass them in shader
an object of the class should be situated in "*Object", "View", "Perspective" etc classes to pass everything to shader

2
use "InstancedObject" to create custom particle system class

3
shader constructor to parse custom shader code into glsl

+4
make universal *Buffer class with a template not to copypaste code

!5
move all main() loading strings to file and make loader class
renderer should parse .txt with loader class and then render everything in declared sequence

!6
make WindowManager class from Window class and make the draw sequence for every window in Renderer

7
rename some classes to fit their names (like Skybox in Cubemap)

8
add const qualifiers where it need to be

!9
parse materials from the .mtl, MaterialList must be in Mesh class instead of Object class?

+10
make Object interface class and move some common logic to it

11
rename some GL_* definitions to own enums

!12
provide glAttachShader not only for two shaders at a time but multiple in Shader class

13
it is possible to reconstruct *Object render by using VBO, the only thing need is to make multiple VBO

14
split CMakeList to compile other libraries only once

15
make counter instead of noname in object etc names

16
hide window pointers etc in *Object classes

!17
disallow multiple calls of loadTexture() in Texture class, also genTextureColorBuffers() in Framebuffer class, check for others

!18
catch if exceed index of vectors

19
do something with "ns" in texture layouts

+20
test ShaderUniform in shaderObjectFunc, or even use it without it, might move user logic in ShaderUniform
also could use ShaderUniform in *Object draw function to maintain uniforms that must be updated

21
add list of user timing functions in animation

!22 (9)
for every model part fill its own material, made common material to multiuse
remove material redaction in scene file

!23
add possibility to change current camera

24?
add user function list in renderer

25
make pose animation time user defined

26 (11)
map all opengl logic and enums to samecalled functions in its own class to make multiplatform and multiversional code

add user logic hole like as in Renderer for every class
or make interface for a lot of different cases instead

27
add namespaces

28 (26)
remove GLfloat etc where it must be just float etc

!29
a bug in animation while movin bone, it moves according to default object position

30
pass user function in setDefaultEvents

31?
split "sklobj" in sceneloader to "sklobj" and "anm" to use animation multiple times

!32
do something with *List, IObject and other common cases

!33
+add IShaderField interface to textures and all other classes
+make parameters of pushToShader as fields wherever it needed
Shader methods should be called only in IShaderField childs
add setShaderParams method to IShaderField?

!34
remove duplicate name fields in SceneLoader and all related

!35
make all IShaderField attrib in buffer like vmodel in InstancedBuffer

!36?
move load method to ILoader and use it in sceneloader

99?
recorder class to render video

отрисовка объектов
класс для упрощения учёта набора переменных для ивентов
интерфейс взаимодействия с объектами - файл с основной логикой взаимодействия
